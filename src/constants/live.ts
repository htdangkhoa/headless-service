import { type Protocol } from 'puppeteer-core';

enum COMMANDS {
  START_SCREENCAST = 'Page.startScreencast',
  STOP_SCREENCAST = 'Page.stopScreencast',
  SCREENCAST_FRAME_ACK = 'Page.screencastFrameAck',

  INPUT_DISPATCH_MOUSE_EVENT = 'Input.dispatchMouseEvent',
  INPUT_DISPATCH_KEY_EVENT = 'Input.dispatchKeyEvent',

  SET_VIEWPORT = 'Page.setViewport',
  GO_BACK = 'Page.goBack',
  GO_FORWARD = 'Page.goForward',
  RELOAD = 'Page.reload',
  ENABLE = 'Page.enable',
  SET_LIFECYCLE_EVENTS_ENABLED = 'Page.setLifecycleEventsEnabled',
  LIFECYCLE_EVENT = 'Page.lifecycleEvent',

  REGISTER_SCREENCAST = 'Live.registerScreencast',
  RENDER_TABS = 'Live.renderTabs',
  GO_TO_TAB = 'Live.goToTab',
  CLOSE_TAB = 'Live.closeTab',
  RENEW_SESSION = 'Live.renewSession',
  RENEW_SESSION_ACK = 'Live.renewSessionAck',

  FRAME_NAVIGATED = 'Page.frameNavigated',
  SCREENCAST_FRAME = 'Page.screencastFrame',

  SCREENCAST_REGISTERED = 'Live.screencastRegistered',
  TARGET_CREATED = 'Target.created',
  TARGET_DESTROYED = 'Target.destroyed',
  TARGET_BRING_TO_FRONT = 'Target.bringToFront',
  TARGET_STATE_CHANGED = 'Target.stateChanged',
}

export const LIVE_CLIENT = {
  COMMANDS: {
    // session
    REGISTER_SCREENCAST: COMMANDS.REGISTER_SCREENCAST,
    RENEW_SESSION: COMMANDS.RENEW_SESSION,
    // tabs
    GO_TO_TAB: COMMANDS.GO_TO_TAB,
    CLOSE_TAB: COMMANDS.CLOSE_TAB,
    // navigation
    GO_BACK: COMMANDS.GO_BACK,
    GO_FORWARD: COMMANDS.GO_FORWARD,
    RELOAD: COMMANDS.RELOAD,
    STOP_SCREENCAST: COMMANDS.STOP_SCREENCAST,
    // screencast
    SCREENCAST_FRAME_ACK: COMMANDS.SCREENCAST_FRAME_ACK,
    // page control
    INPUT_DISPATCH_MOUSE_EVENT: COMMANDS.INPUT_DISPATCH_MOUSE_EVENT,
    INPUT_DISPATCH_KEY_EVENT: COMMANDS.INPUT_DISPATCH_KEY_EVENT,
    SET_VIEWPORT: COMMANDS.SET_VIEWPORT,
  },
  EVENTS: {
    SCREENCAST_REGISTERED: COMMANDS.SCREENCAST_REGISTERED,
    SCREENCAST_FRAME: COMMANDS.SCREENCAST_FRAME,
    TARGET_CREATED: COMMANDS.TARGET_CREATED,
    TARGET_DESTROYED: COMMANDS.TARGET_DESTROYED,
    TARGET_BRING_TO_FRONT: COMMANDS.TARGET_BRING_TO_FRONT,
    FRAME_NAVIGATED: COMMANDS.FRAME_NAVIGATED,
    RENEW_SESSION_ACK: COMMANDS.RENEW_SESSION_ACK,
    TARGET_STATE_CHANGED: COMMANDS.TARGET_STATE_CHANGED,
  },
} as const;

export const LIVE_SERVER = {
  COMMANDS: {
    SCREENCAST_REGISTERED: COMMANDS.SCREENCAST_REGISTERED,
    TARGET_CREATED: COMMANDS.TARGET_CREATED,
    TARGET_DESTROYED: COMMANDS.TARGET_DESTROYED,
    TARGET_BRING_TO_FRONT: COMMANDS.TARGET_BRING_TO_FRONT,
    FRAME_NAVIGATED: COMMANDS.FRAME_NAVIGATED,
    SCREENCAST_FRAME: COMMANDS.SCREENCAST_FRAME,
    RENEW_SESSION_ACK: COMMANDS.RENEW_SESSION_ACK,
    TARGET_STATE_CHANGED: COMMANDS.TARGET_STATE_CHANGED,
  },
  EVENTS: {
    REGISTER_SCREENCAST: COMMANDS.REGISTER_SCREENCAST,
    GO_TO_TAB: COMMANDS.GO_TO_TAB,
    CLOSE_TAB: COMMANDS.CLOSE_TAB,
    RENEW_SESSION: COMMANDS.RENEW_SESSION,
    SET_VIEWPORT: COMMANDS.SET_VIEWPORT,
    GO_BACK: COMMANDS.GO_BACK,
    GO_FORWARD: COMMANDS.GO_FORWARD,
    RELOAD: COMMANDS.RELOAD,
    STOP_SCREENCAST: COMMANDS.STOP_SCREENCAST,
    SCREENCAST_FRAME_ACK: COMMANDS.SCREENCAST_FRAME_ACK,
    INPUT_DISPATCH_MOUSE_EVENT: COMMANDS.INPUT_DISPATCH_MOUSE_EVENT,
    INPUT_DISPATCH_KEY_EVENT: COMMANDS.INPUT_DISPATCH_KEY_EVENT,
  },
  CDP_COMMANDS: {
    START_SCREENCAST: COMMANDS.START_SCREENCAST,
    STOP_SCREENCAST: COMMANDS.STOP_SCREENCAST,
    ENABLE: COMMANDS.ENABLE,
    SET_LIFECYCLE_EVENTS_ENABLED: COMMANDS.SET_LIFECYCLE_EVENTS_ENABLED,
  },
  CDP_EVENTS: {
    SCREENCAST_FRAME: COMMANDS.SCREENCAST_FRAME,
    LIFECYCLE_EVENT: COMMANDS.LIFECYCLE_EVENT,
  },
} as const;

export const DEFAULT_SCREENCAST_CONFIGS: Protocol.Page.StartScreencastRequest = {
  format: 'jpeg',
  quality: 80,
  everyNthFrame: 1,
} as const;
